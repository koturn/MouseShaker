using System;
using System.Runtime.InteropServices;


namespace MouseShaker.Inputs
{
    /// <summary>
    /// Union structure of <see cref="MouseInput"/>, <see cref="KeyboardInput"/> or <see cref="HardwareInput"/>.
    /// </summary>
    /// <remarks>
    /// <para><seealso cref="Input"/></para>
    /// <para><see cref="KeyboardInput"/> supports nonkeyboard input methods, such as handwriting recognition or voice recognition, as if it were text input by using the <see cref="KeyEventF.Unicode"/> flag.
    /// For more information, see the remarks section of <see cref="KeyboardInput"/>.</para>
    /// </remarks>
    [StructLayout(LayoutKind.Explicit)]
    public struct InputUnion
    {
        /// <summary>
        /// The information about a simulated mouse event.
        /// </summary>
        [FieldOffset(0)]
        public MouseInput Mouse;
        /// <summary>
        /// The information about a simulated keyboard event.
        /// </summary>
        [FieldOffset(0)]
        public KeyboardInput Keyboard;
        /// <summary>
        /// The information about a simulated hardware event.
        /// </summary>
        [FieldOffset(0)]
        public HardwareInput Hardware;


        /// <summary>
        /// Initialize with specified <see cref="MouseInput"/>.
        /// </summary>
        /// <param name="mouse">The information about a simulated mouse event.</param>
        public InputUnion(MouseInput mouse)
            : this()
        {
            Mouse = mouse;
        }

        /// <summary>
        /// Initialize with specified <see cref="KeyboardInput"/>.
        /// </summary>
        /// <param name="keyboard">The information about a simulated keyboard event.</param>
        public InputUnion(KeyboardInput keyboard)
            : this()
        {
            Keyboard = keyboard;
        }

        /// <summary>
        /// Initialize with specified <see cref="HardwareInput"/>.
        /// </summary>
        /// <param name="hardware">The information about a simulated hardware event.</param>
        public InputUnion(HardwareInput hardware)
            : this()
        {
            Hardware = hardware;
        }


        /// <summary>
        /// Create <see cref="InputUnion"/> which contains <see cref="MouseInput"/>.
        /// </summary>
        /// <param name="flags">A set of bit flags that specify various aspects of mouse motion and button clicks.</param>
        /// <param name="x">The absolute position of the mouse, or the amount of motion since the last mouse event was generated, depending on the value of the <paramref name="flags"/>.</param>
        /// <param name="y">The absolute position of the mouse, or the amount of motion since the last mouse event was generated, depending on the value of the <paramref name="flags"/>.</param>
        /// <param name="data">A mouse data depends on <paramref name="flags"/>.</param>
        /// <param name="time">The time stamp for the event, in milliseconds.</param>
        /// <param name="extraInfo">An additional value associated with the mouse event.</param>
        /// <returns><see cref="InputUnion"/> which contains <see cref="MouseInput"/>.</returns>
        public static InputUnion CreateMouseInput(MouseEventF flags, int x = 0, int y = 0, int data = 0, int time = 0, IntPtr extraInfo = default)
        {
            return new InputUnion(new MouseInput(flags, x, y, data, time, extraInfo));
        }

        /// <summary>
        /// Create <see cref="InputUnion"/> which contains <see cref="KeyboardInput"/>.
        /// </summary>
        /// <param name="flags">Specifies various aspects of a keystroke.</param>
        /// <param name="virtualKey">A virtual-key code.</param>
        /// <param name="scanCode">A hardware scan code for the key.</param>
        /// <param name="time">The time stamp for the event, in milliseconds.</param>
        /// <param name="extraInfo">An additional value associated with the keystroke.</param>
        /// <returns><see cref="InputUnion"/> which contains <see cref="KeyboardInput"/>.</returns>
        public static InputUnion CreateKeyboardInput(KeyEventF flags, short virtualKey = 0, short scanCode = 0, int time = 0, IntPtr extraInfo = default)
        {
            return new InputUnion(new KeyboardInput(flags, virtualKey, scanCode, time, extraInfo));
        }

        /// <summary>
        /// Create <see cref="InputUnion"/> which contains <see cref="HardwareInput"/>.
        /// </summary>
        /// <param name="message">The message generated by the input hardware.</param>
        /// <param name="paramL">The low-order word of the lParam parameter for <see cref="Message"/>.</param>
        /// <param name="paramH">The high-order word of the lParam parameter for <see cref="Message"/>.</param>
        /// <returns><see cref="InputUnion"/> which contains <see cref="HardwareInput"/>.</returns>
        public static InputUnion CreateHardwareInput(int message, short paramL, short paramH)
        {
            return new InputUnion(new HardwareInput(message, paramL, paramH));
        }
    }
}
